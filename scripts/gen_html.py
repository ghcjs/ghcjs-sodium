#!/usr/bin/env python

keywords = '''
case class data default deriving do else foreign if import in infix infixl
infixr instance let module newtype of then type where
'''.split()

def normalize(s):
    if s in keywords:
        return s + '_'
    return s

### Elements

outfile = open('src/Alder/Html/Elements.hs', 'w')

html_tags = '''
a abbr address area article aside audio b base bdi bdo big blockquote body br
button canvas caption cite code col colgroup data datalist dd del details dfn
div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6
head header hr html i iframe img input ins kbd keygen label legend li link
main map mark menu menuitem meta meter nav noscript object ol optgroup option
output p param pre progress q rp rt ruby s samp script section select small
source span strong style sub summary sup table tbody td textarea tfoot th
thead time title tr track u ul var video wbr
'''.split()

void_tags = '''
area base br col command embed hr img input keygen link meta param source
track wbr
'''.split()

header = '''\
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
module Alder.Html.Elements where

import           Alder.Html.Internal

-- This file was automatically generated by scripts/gen_html.py
'''

html_declaration = '''
-- | The HTML @{0}@ tag.
{0} :: Html -> Html
{0} = Parent "{0}"
'''

void_declaration = '''
-- | The HTML @{0}@ tag.
{0} :: Html
{0} = Leaf "{0}"
'''

outfile.write(header)

for tag in html_tags:
    tag = normalize(tag)
    if tag in void_tags:
        outfile.write(html_declaration.format(tag))
    else:
        outfile.write(void_declaration.format(tag))

outfile.close()
