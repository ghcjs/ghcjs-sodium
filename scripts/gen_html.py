#!/usr/bin/env python

### Elements

outfile = open('src/Alder/Html/Elements.hs', 'w')

html_tags = '''
a abbr address area article aside audio b base bdi bdo big blockquote body br
button canvas caption cite code col colgroup data_ datalist dd del details
dfn div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5
h6 head header hr html i iframe img input ins kbd keygen label legend li link
main map mark menu menuitem meta meter nav noscript object ol optgroup option
output p param pre progress q rp rt ruby s samp script section select small
source span strong style sub summary sup table tbody td textarea tfoot th
thead time title tr track u ul var video wbr
'''.split()

void_tags = '''
area base br col command embed hr img input keygen link meta param source
track wbr
'''.split()

header = '''\
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
module Alder.Html.Elements where

import           Alder.Html.Internal

-- This file was automatically generated by scripts/gen_html.py
'''

html_declaration = '''
-- | The HTML @{0}@ tag.
{1} :: Html -> Html
{1} = parent "{0}"
'''

void_declaration = '''
-- | The HTML @{0}@ tag.
{1} :: Html
{1} = leaf "{0}"
'''

outfile.write(header)

for tag in html_tags:
    tag_ = tag.replace('_', '')
    if tag not in void_tags:
        outfile.write(html_declaration.format(tag_, tag))
    else:
        outfile.write(void_declaration.format(tag_, tag))

outfile.close()

### Attributes

outfile = open('src/Alder/Html/Attributes.hs', 'w')

# TODO: change some attributes to token_set, or add new types
attributes = {}

attributes['className'] = 'token_set'

tokens = '''
accept accessKey action allowFullScreen allowTransparency alt cellPadding
cellSpacing charset checked colSpan cols content contentEditable contextMenu
controls data_ dateTime dir draggable encType form formNoValidate frameBorder
height href htmlFor icon id label lang list max maxLength method min name
pattern placeholder poster radioGroup readOnly rel role rowSpan rows sandbox
scope scrollLeft scrollTop selected size span spellCheck src srcDoc step style
tabIndex target title type_ value width wmode
'''

attributes.update({attr:'token' for attr in tokens.split()})

booleans = '''
async autocomplete autofocus autoplay checked defer disabled download hidden
loop multiple noValidate preload readOnly required reversed seamless
spellCheck
'''

attributes.update({attr:'boolean' for attr in booleans.split()})

events = {
    'onKeyDown'    : 'KeyboardEvent',
    'onKeyPress'   : 'KeyboardEvent',
    'onKeyUp'      : 'KeyboardEvent',
    'onFocus'      : 'FocusEvent',
    'onBlur'       : 'FocusEvent',
    'onInput'      : 'InputEvent',
    'onSubmit'     : 'SubmitEvent',
    'onMouseDown'  : 'MouseEvent',
    'onMouseUp'    : 'MouseEvent',
    'onClick'      : 'MouseEvent',
    'onDoubleClick': 'MouseEvent',
    'onMouseMove'  : 'MouseEvent',
    'onMouseEnter' : 'MouseEvent',
    'onMouseLeave' : 'MouseEvent'
}

attributes.update(events)

header = '''\
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
module Alder.Html.Attributes where

import           Data.Text           (Text)

import qualified Alder.Html.Events   as E
import           Alder.Html.Internal

-- This file was automatically generated by scripts/gen_html.py
'''

token_declaration = '''
-- | The @{0}@ attribute.
{1} :: Text -> Attribute
{1} = token "{0}"
'''

token_set_declaration = '''
-- | The @{0}@ attribute. This will append to the current value of the
-- attribute.
{1} :: Text -> Attribute
{1} = tokenSet "{0}"
'''

boolean_declaration = '''
-- | The @{0}@ attribute.
{1} :: Attribute
{1} = boolean "{0}"
'''

event_declaration = '''
-- | Set the handler for the @{0}@ event.
{1} :: Handler f => f E.{2} -> Attribute
{1} = onEvent "{0}"
'''

outfile.write(header)

for attr in sorted(list(attributes)):
    attr_ = attr.lower().replace('_', '')
    if attributes[attr] == 'token':
        outfile.write(token_declaration.format(attr_, attr))
    elif attributes[attr] == 'token_set':
        outfile.write(token_set_declaration.format(attr_, attr))
    elif attributes[attr] == 'boolean':
        outfile.write(boolean_declaration.format(attr_, attr))
    else:
        eventType = attributes[attr]
        eventName = attr[2:].lower()
        if eventName == 'doubleclick':
            eventName = 'dblclick'
        outfile.write(event_declaration.format(eventName, attr, eventType))

outfile.close()
